[tool:pytest]
# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Output and verbosity
addopts = 
    --tb=no
    --strict-markers
    --strict-config
    --color=yes
    --durations=10
    --durations-min=0.1
    -q
    --no-header
    --no-summary
    --capture=no
    --html=reports/pytest-report.html
    --self-contained-html
    --metadata Environment staging
    --metadata Project "Backend Tutorial DDD"
    --cov=src
    --cov-report=html:reports/coverage
    --cov-fail-under=80

# Warning filters - be selective about what we ignore
# 
# DATETIME WARNING SOLUTION:
# Python 3.12 deprecated datetime.utcnow() in favor of datetime.now(timezone.utc).
# Our codebase has been audited and uses the modern timezone-aware approach.
# However, AWS botocore library (as of v1.39.12) still uses the deprecated method internally.
# This is a known issue: https://github.com/python/cpython/issues/103857
# 
# The warnings we see come from third-party libraries, not our code.
# We show ALL warnings from our own code to catch any issues we can fix.
#
filterwarnings =
    # Ignore third-party deprecation warnings that we cannot control
    # AWS botocore still uses deprecated datetime.utcnow() internally
    ignore::DeprecationWarning:botocore
    
    # Show ALL warnings from our own code (src/ and tests/)
    default::DeprecationWarning:src
    default::DeprecationWarning:tests
    default::UserWarning:src
    default::UserWarning:tests
    default::RuntimeWarning:src
    default::RuntimeWarning:tests
    default::FutureWarning:src
    default::FutureWarning:tests
    
    # Show important warnings from other packages (not botocore)
    default::UserWarning
    default::RuntimeWarning
    default::FutureWarning

# Markers for test organization
markers =
    # Test types
    unit: Unit tests (fast, isolated)
    integration: Integration tests (slower, external dependencies)
    e2e: End-to-end tests (slowest, full system)
    
    # Test categories
    slow: Tests that take longer than 1 second
    critical: Critical path tests that must pass
    flaky: Tests that occasionally fail (for monitoring)
    
    # Domain-specific
    domain: Domain layer tests
    application: Application layer tests
    infrastructure: Infrastructure layer tests
    api: API layer tests
    
    # Async support
    asyncio: Async tests that require asyncio support
    
    # Parallel execution groups
    xdist_group(name): Group tests for parallel execution

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# HTML report configuration
html_report_title = "Backend Tutorial DDD - Test Report"
html_report_description = "Comprehensive test results for the DDD backend tutorial"

# Environment variables to redact from reports
environment_table_redact_list = 
    ^AWS_
    ^SECRET
    ^PASSWORD
    ^TOKEN
    ^KEY 